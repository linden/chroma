<lexer>
  <config>
    <name>Clarity</name>
    <alias>clarity</alias>
    <alias>clar</alias>
    <alias>lisp</alias>
    <filename>*.clar</filename>
    <mime_type>text/clarity</mime_type>
    <case_insensitive>true</case_insensitive>
  </config>
  <rules>
    <state name="body">
      <rule pattern="\s+">
        <token type="Text"/>
      </rule>
      <rule pattern="\b(ok|and|append|as-contract|as-max-len|asserts|at-block|begin|concat|contract-call|contract-of|default-to|define-constant|define-data-var|define-fungible-token|define-map|define-non-fungible-token|define-private|define-public|define-read-only|define-trait|element-at|err|filter|fold|ft-burn|ft-get-balance|ft-get-supply|ft-mint|ft-transfer|get|get-block-info|hash160|if|impl-trait|index-of|is-eq|is-err|is-none|is-ok|is-some|keccak256|len|let|list|log2|map|map-delete|map-get|map-insert|map-set|match|merge|mod|nft-burn|nft-get-owner|nft-mint|nft-transfer|not|ok|or|pow|principal-of|print|secp256k1-recover|secp256k1-verify|sha256|sha512|some|sqrti|stx-burn|stx-get-balance|stx-transfer|to-int|to-uint|try|tuple|unwrap-err-panic|unwrap-err|unwrap-panic|unwrap|use-trait|var-get|var-set|xor)\b">
      	<token type="Keyword"/>
      </rule>
      <rule pattern="(true|false|none|block-height|burn-block-height|contract-caller|is-in-regtest|stx-liquid-supply|tx-sender)\b">
        <token type="KeywordConstant"/>
      </rule>
      <rule pattern="(uint|int|bool|principal|string-utf8|string-ascii|buff|some|optional|response|list|map|err)\b">
        <token type="KeywordReserved"/>
      </rule>
      <rule pattern=";;\s.*$">
        <token type="CommentSingle"/>
      </rule>
      <rule pattern="&#34;(\\.|\\\n|[^&#34;\\])*&#34;">
        <token type="LiteralString"/>
      </rule>
      <rule pattern=":(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="LiteralStringSymbol"/>
      </rule>
      <rule pattern="::(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="LiteralStringSymbol"/>
      </rule>
      <rule pattern=":#(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="LiteralStringSymbol"/>
      </rule>
      <rule pattern="&#39;(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="LiteralStringSymbol"/>
      </rule>
      <rule pattern="&#39;">
        <token type="Operator"/>
      </rule>
      <rule pattern="`">
        <token type="Operator"/>
      </rule>
      <rule pattern="[-+]?\d+\.?(?=[ &#34;()\&#39;\n,;`])">
        <token type="LiteralNumberInteger"/>
      </rule>
      <rule pattern="[-+]?\d+/\d+(?=[ &#34;()\&#39;\n,;`])">
        <token type="LiteralNumber"/>
      </rule>
      <rule pattern="[-+]?(\d*\.\d+([defls][-+]?\d+)?|\d+(\.\d*)?[defls][-+]?\d+)(?=[ &#34;()\&#39;\n,;`])">
        <token type="LiteralNumberFloat"/>
      </rule>
      <rule pattern="#\\.(?=[ &#34;()\&#39;\n,;`])">
        <token type="LiteralStringChar"/>
      </rule>
      <rule pattern="#\\(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="LiteralStringChar"/>
      </rule>
      <rule pattern="#\(">
        <token type="Operator"/>
        <push state="body"/>
      </rule>
      <rule pattern="#\d*\*[01]*">
        <token type="LiteralOther"/>
      </rule>
      <rule pattern="#:(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="LiteralStringSymbol"/>
      </rule>
      <rule pattern="#[.,]">
        <token type="Operator"/>
      </rule>
      <rule pattern="#\&#39;">
        <token type="NameFunction"/>
      </rule>
      <rule pattern="#b[+-]?[01]+(/[01]+)?">
        <token type="LiteralNumberBin"/>
      </rule>
      <rule pattern="#o[+-]?[0-7]+(/[0-7]+)?">
        <token type="LiteralNumberOct"/>
      </rule>
      <rule pattern="#x[+-]?[0-9a-f]+(/[0-9a-f]+)?">
        <token type="LiteralNumberHex"/>
      </rule>
      <rule pattern="#\d+r[+-]?[0-9a-z]+(/[0-9a-z]+)?">
        <token type="LiteralNumber"/>
      </rule>
      <rule pattern="(#c)(\()">
        <bygroups>
          <token type="LiteralNumber"/>
          <token type="Punctuation"/>
        </bygroups>
        <push state="body"/>
      </rule>
      <rule pattern="(#\d+a)(\()">
        <bygroups>
          <token type="LiteralOther"/>
          <token type="Punctuation"/>
        </bygroups>
        <push state="body"/>
      </rule>
      <rule pattern="(#s)(\()">
        <bygroups>
          <token type="LiteralOther"/>
          <token type="Punctuation"/>
        </bygroups>
        <push state="body"/>
      </rule>
      <rule pattern="#p?&#34;(\\.|[^&#34;])*&#34;">
        <token type="LiteralOther"/>
      </rule>
      <rule pattern="#\d+=">
        <token type="Operator"/>
      </rule>
      <rule pattern="#\d+#">
        <token type="Operator"/>
      </rule>
      <rule pattern="#+nil(?=[ &#34;()\&#39;\n,;`])\s*\(">
        <token type="CommentPreproc"/>
        <push state="commented-form"/>
      </rule>
      <rule pattern="#[+-]">
        <token type="Operator"/>
      </rule>
      <rule pattern="(,@|,|\.)">
        <token type="Operator"/>
      </rule>
      <rule pattern="\*(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)\*">
        <token type="NameVariableGlobal"/>
      </rule>
      <rule pattern="(\|[^|]+\||(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~])(?:\\.|[\w!$%&amp;*+-/&lt;=&gt;?@\[\]^{}~]|[#.:])*)">
        <token type="NameVariable"/>
      </rule>
      <rule pattern="\(">
        <token type="Punctuation"/>
        <push state="body"/>
      </rule>
      <rule pattern="\)">
        <token type="Punctuation"/>
        <pop depth="1"/>
      </rule>
    </state>
    <state name="root">
      <rule>
        <push state="body"/>
      </rule>
    </state>
    <state name="commented-form">
      <rule pattern="\(">
        <token type="CommentPreproc"/>
        <push/>
      </rule>
      <rule pattern="\)">
        <token type="CommentPreproc"/>
        <pop depth="1"/>
      </rule>
      <rule pattern="[^()]+">
        <token type="CommentPreproc"/>
      </rule>
    </state>
  </rules>
</lexer>